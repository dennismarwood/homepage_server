---
version: '3'
services:
  nginx_reverse_proxy:
    build: ./nginx
    container_name: nginx
    restart: unless-stopped
    ports:
      - 80:80
      - 443:443
    networks:
      docker_network:
        aliases:
          - docker_network
    volumes:
      - /home/dennis/Docker_Volumes/nginx/reverse_proxy

  rocketchat:
    build: ./rocket_chat
    command: >
      bash -c
      "for i in `seq 1 30`; do
      node main.js &&
      s=$$? && break || s=$$?;
      echo \"Tried $$i times. Waiting 5 secs...\";
      sleep 5;
      done; (exit $$s)"
      restart: unless-stopped
    volumes:
      - /home/dennis/Docker_Volumes/rocket_chat/uploads:/app/uploads
    environment:
      - PORT=3000
      #- ROOT_URL=http://localhost:3000
      #- ROOT_URL=https://www.dennismarwood.com:3000
      #- ROOT_URL=https://www.dennismarwood.com
      - ROOT_URL=https://chat.dennismarwood.com
      - MONGO_URL=mongodb://mongo:27017/rocketchat
      - MONGO_OPLOG_URL=mongodb://mongo:27017/local
      - MAIL_URL=smtp://smtp.email
      #- HTTP_PROXY=http://proxy.domain.com
      #- HTTPS_PROXY=http://proxy.domain.com
      - HTTP_FORWARDED_COUNT=1
    depends_on:
      - mongo
    ports:
      - 3000:3000
    labels:
      - "traefik.backend=rocketchat"
      - "traefik.frontend.rule=Host: chat.dennismarwood.com"
    networks:
      docker_network:
        aliases:
          - rocketchat

  mongo:
    image: mongo:4.0
    restart: unless-stopped
    volumes:
    - /home/dennis/Docker_Volumes/mongo/data/db:/data/db
    - /home/dennis/Docker_Volumes/mongo/data/dump:/dump
    command: mongod --smallfiles --oplogSize 128 --replSet rs0 --storageEngine=mmapv1
    labels:
    - "traefik.enable=false"
    ports:
      - 27017:27017
    networks:
      docker_network:
        aliases:
          - mongo 

  # this container's job is just run the command to initialize the replica set.
  # it will run the command and remove himself (it will not stay running)
  mongo-init-replica:
    image: mongo:4.0
    command: >
      bash -c
      "for i in `seq 1 30`; do
      mongo mongo/rocketchat --eval \"
      rs.initiate({
      _id: 'rs0',
      members: [ { _id: 0, host: 'localhost:27017' } ]})\" &&
      s=$$? && break || s=$$?;
      echo \"Tried $$i times. Waiting 5 secs...\";
      sleep 5;
      done; (exit $$s)"
    depends_on:
      - mongo
    networks:
      docker_network:
        aliases:
          - mongo_replica

# a network is how we allow our containers to talk to one another
networks:
  #This is the name at the container level
  docker_network:
    #This is the name at the compose file level
    name: docker_network

# hubot, the popular chatbot (add the bot user first and change the password before starting this image)
#hubot:
#image: rocketchat/hubot-rocketchat:latest
#restart: unless-stopped
#environment:
#- ROCKETCHAT_URL=rocketchat:3000
#- ROCKETCHAT_ROOM=GENERAL
#- ROCKETCHAT_USER=bot
#- ROCKETCHAT_PASSWORD=botpassword
#- BOT_NAME=bot
# you can add more scripts as you'd like here, they need to be installable by npm
#- EXTERNAL_SCRIPTS=hubot-help,hubot-seen,hubot-links,hubot-diagnostics
#depends_on:
#- rocketchat
#labels:
#- "traefik.enable=false"
#volumes:
#- ./scripts:/home/hubot/scripts
# this is used to expose the hubot port for notifications on the host on port 3001, e.g. for hubot-jenkins-notifier
#ports:
#- 3001:8080

#traefik:
#  image: traefik:latest
#  restart: unless-stopped
#  command: >
#    traefik
#     --docker
#     --acme=true
#     --acme.domains='your.domain.tld'
#     --acme.email='your@email.tld'
#     --acme.entrypoint=https
#     --acme.storagefile=acme.json
#     --defaultentrypoints=http
#     --defaultentrypoints=https
#     --entryPoints='Name:http Address::80 Redirect.EntryPoint:https'
#     --entryPoints='Name:https Address::443 TLS.Certificates:'
#  ports:
#    - 80:80
#    - 443:443
#  volumes:
#    - /var/run/docker.sock:/var/run/docker.sock